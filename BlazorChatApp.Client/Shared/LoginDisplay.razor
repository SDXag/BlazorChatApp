@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IAccessTokenProvider AuthenticationService

<AuthorizeView>
    <Authorized>
        Hello, @context.User.Identity.Name!
        <button @onclick="AccessToken">AccessToken</button>
        
        <button class="nav-link btn btn-link" @onclick="BeginSignOut">Log out</button>
    </Authorized>
    <NotAuthorized>
        <button class="nav-link btn btn-link" @onclick="BeginSignIn">Log in</button>
    </NotAuthorized>
</AuthorizeView>

@code{

    private async Task AccessToken(MouseEventArgs args) {
        var tokenResult = await AuthenticationService.RequestAccessToken(
            new AccessTokenRequestOptions()
        );
        Console.WriteLine(tokenResult.Status);
        Console.WriteLine(tokenResult.RedirectUrl);
        if(tokenResult != null && tokenResult.TryGetToken(out var accessToken))
        {
            Console.WriteLine($"Got Token: {accessToken?.Value}");
            Console.WriteLine($"Scopes: {string.Join("', '", accessToken?.GrantedScopes)}");
        } else
        {
            Console.WriteLine($"No Token");
        }
    }

    private void BeginSignIn(MouseEventArgs args)
    {
        Navigation.NavigateTo($"authentication/login?returnUrl={Navigation.Uri}");
    }
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}
